interface IReferences {
  [key: string]: any;
}
const References: IReferences = {
  Default: {
    properties: {},
    signals: {},
    methods: {},
    inherit: "QtObject",
  },
  Abstract3DSeries: {
    properties: {
      baseColor: "color",
      baseGradient: "ColorGradient",
      colorStyle: "Theme3D.ColorStyle",
      itemLabel: "string",
      itemLabelFormat: "string",
      itemLabelVisible: "bool",
      mesh: "Abstract3DSeries.Mesh",
      meshRotation: "quaternion",
      meshSmooth: "bool",
      multiHighlightColor: "color",
      multiHighlightGradient: "ColorGradient",
      name: "string",
      singleHighlightColor: "color",
      singleHighlightGradient: "ColorGradient",
      type: "Abstract3DSeries.SeriesType",
      userDefinedMesh: "string",
      visible: "bool",
    },
    signals: {},
    methods: {},
    inherit: "QtObject",
  },
  Rectangle: {
    properties: {
      antialiasing: "bool",
      gradient: "any",
      color: "color",
      radius: "real",
      border: {
        color: "color",
        width: "int",
      },
    },
    signals: {},
    methods: {},
    inherit: "Item",
  },
  Button: {
    properties: {
      flat: "bool",
      highlighted: "bool",
    },
    signals: {},
    methods: {},
    inherit: "AbstractButton",
  },
  AbstractButton: {
    properties: {
      action: "Action",
      autoExclusive: "bool",
      autoRepeat: "bool",
      autoRepeatDelay: "int",
      autoRepeatInterval: "int",
      checkable: "bool",
      checked: "bool",
      display: "enumeration",
      down: "bool",
      icon: {
        cache: "bool",
        color: "color",
        height: "int",
        name: "string",
        source: "url",
        width: "int",
      },
      implicitIndicatorHeight: "real",
      implicitIndicatorWidth: "real",
      indicator: "Item",
      pressX: "real",
      pressY: "real",
      pressed: "bool",
      text: "string",
    },
    signals: {
      canceled: "voide-()",
      clicked: "voide-()",
      doubleClicked: "voide-()",
      pressAndHold: "voide-()",
      pressed: "voide-()",
      released: "voide-()",
      toggled: "voide-()",
    },
    methods: {
      toggle: "void-()",
    },
    inherit: "Control",
  },
  Control: {
    properties: {
      availableHeight: "real",
      availableWidth: "real",
      background: "Item",
      bottomInset: "real",
      bottomPadding: "real",
      contentItem: "Item",
      focusPolicy: "enumeration",
      focusReason: "enumeration",
      font: "font",
      horizontalPadding: "real",
      hoverEnabled: "bool",
      hovered: "bool",
      implicitBackgroundHeight: "real",
      implicitBackgroundWidth: "real",
      implicitContentHeight: "real",
      implicitContentWidth: "real",
      leftInset: "real",
      leftPadding: "real",
      locale: "Locale",
      mirrored: "bool",
      padding: "real",
      palette: "palette",
      rightInset: "real",
      rightPadding: "real",
      spacing: "real",
      topInset: "real",
      topPadding: "real",
      verticalPadding: "real",
      visualFocus: "bool",
      wheelEnabled: "bool",
    },
    signals: {},
    methods: {},
    inherit: "Item",
  },
  ComboBox: {
    properties: {
      acceptableInput: "bool",
      count: "int",
      currentIndex: "int",
      currentText: "string",
      currentValue: "string",
      delegate: "Component",
      displayText: "string",
      down: "bool",
      editText: "string",
      editable: "bool",
      flat: "bool",
      highlightedIndex: "int",
      implicitIndicatorHeight: "real",
      implicitIndicatorWidth: "real",
      indicator: "Item",
      inputMethodComposing: "bool",
      inputMethodHints: "flags",
      model: "model",
      popup: "Popup",
      pressed: "bool",
      selectTextByMouse: "bool",
      textRole: "string",
      validator: "Validator",
      valueRole: "string",
    },
    signals: {
      accepted: "void-()",
      activated: "void-(int index)",
      highlighted: "void-(int index)",
    },
    methods: {
      decrementCurrentIndex: "void-()",
      find: "int-(string text, enumeration flags)",
      incrementCurrentIndex: "void-()",
      indexOfValue: "int-(object value)",
      selectAll: "void-()",
      textAt: "string-(int index)",
    },
    inherit: "Control",
  },
  MouseArea: {
    properties: {
      acceptedButtons: "Qt::MouseButtons",
      containsMouse: "bool",
      containsPress: "bool",
      cursorShape: "Qt::CursorShape",
      drag: {
        active: "bool",
        axis: "enumeration",
        filterChildren: "bool",
        maximumX: "real",
        maximumY: "real",
        minimumX: "real",
        minimumY: "real",
        smoothed: "bool",
        target: "Item",
        threshold: "real",
      },
      enabled: "bool",
      hoverEnabled: "bool",
      mouseX: "real",
      mouseY: "real",
      pressAndHoldInterval: "int",
      pressed: "bool",
      pressedButtons: "MouseButtons",
      preventStealing: "bool",
      propagateComposedEvents: "bool",
      scrollGestureEnabled: "bool",
    },
    signals: {
      canceled: "void-()",
      clicked: "void-(MouseEvent mouse)",
      doubleClicked: "void-(MouseEvent mouse)",
      entered: "void-()",
      exited: "void-()",
      positionChanged: "void-(MouseEvent mouse)",
      pressAndHold: "void-(MouseEvent mouse)",
      pressed: "void-(MouseEvent mouse)",
      released: "void-(MouseEvent mouse)",
      wheel: "void-(WheelEvent wheel)",
    },
    methods: {},
    inherit: "Item",
  },
  Item: {
    properties: {
      activeFocus: "bool",
      activeFocusOnTab: "bool",
      anchors: {
        alignWhenCentered: "bool",
        baseline: "AnchorLine",
        baselineOffset: "real",
        bottom: "AnchorLine",
        bottomMargin: "real",
        centerIn: "Item",
        fill: "Item",
        horizontalCenter: "AnchorLine",
        horizontalCenterOffset: "real",
        left: "AnchorLine",
        leftMargin: "real",
        margins: "real",
        right: "AnchorLine",
        rightMargin: "real",
        top: "AnchorLine",
        topMargin: "real",
        verticalCenter: "AnchorLine",
        verticalCenterOffset: "real",
      },
      antialiasing: "bool",
      baselineOffset: "int",
      children: "list<Item>",
      childrenRect: {
        height: "real",
        width: "real",
        x: "real",
        y: "real",
      },
      clip: "bool",
      containmentMask: "QObject*",
      data: "list<Object> [default]",
      enabled: "bool",
      focus: "bool",
      height: "real",
      implicitHeight: "real",
      implicitWidth: "real",
      layer: {
        effect: "Component",
        enabled: "bool",
        format: "enumeration",
        mipmap: "bool",
        samplerName: "string",
        samples: "enumeration",
        smooth: "bool",
        sourceRect: "rect",
        textureMirroring: "enumeration",
        textureSize: "size",
        wrapMode: "enumeration",
      },
      opacity: "real",
      parent: "Item",
      resources: "list<Object>",
      rotation: "real",
      scale: "real",
      smooth: "bool",
      state: "string",
      states: "list<State>",
      transform: "list<Transform>",
      transformOrigin: "enumeration",
      transitions: "list<Transition>",
      visible: "bool",
      visibleChildren: "list<Item>",
      width: "real",
      x: "real",
      y: "real",
      z: "real",
    },
    signals: {},
    methods: {
      childAt: "void-(real x, real y)",
      contains: "bool-(point point)",
      forceActiveFocus: ["void-(Qt::FocusReason reason)", "void-()"],
      grabToImage: "bool-(callback, targetSize)",
      mapFromGlobal: "object-(real x, real y)",
      mapFromItem: [
        "object-(Item item, rect r)",
        "object-(Item item, real x, real y, real width, real height)",
        "object-(Item item, point p)",
        "object-(Item item, real x, real y)",
      ],
      mapToGlobal: "object-(real x, real y)",
      mapToItem: [
        "object-(Item item, rect r)",
        "object-(Item item, real x, real y, real width, real height)",
        "object-(Item item, point p)",
        "object-(Item item, real x, real y)",
      ],
      nextItemInFocusChain: "void-(bool forward)",
    },
    inherit: "QtObject",
  },
  Page: {
    properties: {
      footer: "Item",
      header: "Item",
      implicitFooterHeight: "real",
      implicitFooterWidth: "real",
      implicitHeaderHeight: "real",
      implicitHeaderWidth: "real",
      title: "string",
    },
    signals: {},
    methods: {},
    inherit: "Pane",
  },
  Pane: {
    properties: {
      contentChildren: "list<Item>",
      contentData: "list<Object>",
      contentHeight: "real",
      contentWidth: "real",
    },
    signals: {},
    methods: {},
    inherit: "Control",
  },
  QtObject: {
    properties: {
      id: "any",
      objectName: "string",
    },
    signals: {},
    methods: {},
  },
  ScrollView: {
    properties: {
      contentChildren: "list<Item>",
      contentData: "list<Object>",
    },
    signals: {},
    methods: {},
    inherit: "Pane",
  },
  Popup: {
    properties: {
      activeFocus: "bool",
      anchors: {
        centerIn: "Object",
      },
      availableHeight: "real",
      availableWidth: "real",
      background: "Item",
      bottomInset: "real",
      bottomMargin: "real",
      bottomPadding: "real",
      clip: "bool",
      closePolicy: "enumeration",
      contentChildren: "list<Item>",
      contentData: "list<Object>",
      contentHeight: "real",
      contentItem: "Item",
      contentWidth: "real",
      dim: "bool",
      enabled: "bool",
      enter: "Transition",
      exit: "Transition",
      focus: "bool",
      font: "font",
      height: "real",
      horizontalPadding: "real",
      implicitBackgroundHeight: "real",
      implicitBackgroundWidth: "real",
      implicitContentHeight: "real",
      implicitContentWidth: "real",
      implicitHeight: "real",
      implicitWidth: "real",
      leftInset: "real",
      leftMargin: "real",
      leftPadding: "real",
      locale: "Locale",
      margins: "real",
      mirrored: "bool",
      modal: "bool",
      opacity: "real",
      opened: "bool",
      padding: "real",
      palette: "palette",
      parent: "Item",
      rightInset: "real",
      rightMargin: "real",
      rightPadding: "real",
      scale: "real",
      spacing: "real",
      topInset: "real",
      topMargin: "real",
      topPadding: "real",
      transformOrigin: "enumeration",
      verticalPadding: "real",
      visible: "bool",
      width: "real",
      x: "real",
      y: "real",
      z: "real",
    },
    signals: {
      aboutToHide: "void",
      aboutToShow: "void",
      closed: "void",
      opened: "void",
    },
    methods: {
      close: "void-()",
      forceActiveFocus: "void-(enumeration reason)",
      open: "void",
    },
    inherit: "QtObject",
  },
  Menu: {
    properties: {
      cascade: "bool",
      contentData: "list<Object>",
      contentModel: "model",
      count: "int",
      currentIndex: "int",
      delegate: "Component",
      focus: "bool",
      overlap: "real",
      title: "string",
    },
    signals: {},
    methods: {
      actionAt: "Action-(int index)",
      addAction: "void-(Action action)",
      addItem: "void-(Item item)",
      addMenu: "void-(Menu menu)",
      dismiss: "void-()",
      insertAction: "void-(int index, Action action)",
      insertItem: "void-(int index, Item item)",
      insertMenu: "void-(int index, Menu menu)",
      itemAt: "Item-(int index)",
      menuAt: "Menu-(int index)",
      moveItem: "void-(int from, int to)",
      popup: [
        "void-(real x, real y, MenuItem item)",
        "void-(Item parent, real x, real y, MenuItem item)",
        "void-(point pos, MenuItem item)",
        "void-(Item parent, point pos, MenuItem item)",
        "void-(MenuItem item)",
        "void-(Item parent, MenuItem item)",
      ],
      removeAction: "void-(Action action)",
      removeItem: "void-(Item item)",
      removeMenu: "void-(Menu menu)",
      takeAction: "Action-(int index)",
      takeItem: "MenuItem-(int index)",
      takeMenu: "Menu-(int index)",
    },
    inherit: "Popup",
  },
  Window: {
    properties: {
      active: "bool",
      activeFocusItem: "Item",
      color: "color",
      contentItem: "Item",
      contentOrientation: "Qt::ScreenOrientation",
      data: "list<Object>",
      flags: "Qt::WindowFlags",
      height: "int",
      maximumHeight: "int",
      maximumWidth: "int",
      minimumHeight: "int",
      minimumWidth: "int",
      modality: "Qt::WindowModality",
      opacity: "real",
      screen: "variant",
      title: "string",
      transientParent: "QWindow",
      visibility: "QWindow::Visibility",
      visible: "bool",
      width: "int",
      window: "Window",
      x: "int",
      y: "int",
    },
    signals: {
      afterAnimating: "void-()",
      closing: "void-(CloseEvent close)",
      frameSwapped: "void-()",
      sceneGraphError: "void-(SceneGraphError error, QString message)",
    },
    methods: {
      alert: "void-(int msec)",
      close: "void-()",
      hide: "void-()",
      lower: "void-()",
      raise: "void-()",
      requestActivate: "void-()",
      show: "void-()",
      showFullScreen: "void-()",
      showMaximized: "void-()",
      showMinimized: "void-()",
      showNormal: "void-()",
    },
    inherit: "QtObject",
  },
  ApplicationWindow: {
    properties: {
      activeFocusControl: "Control",
      background: "Item",
      contentData: "list<Object>",
      contentItem: "Item",
      font: "font",
      footer: "Item",
      header: "Item",
      locale: "Locale",
      menuBar: "Item",
      palette: "palette",
    },
    signals: {},
    methods: {},
    inherit: "Window",
  },
  Text: {
    properties: {
      advance: "size",
      antialiasing: "bool",
      baseUrl: "url",
      bottomPadding: "real",
      clip: "bool",
      color: "color",
      contentHeight: "real",
      contentWidth: "real",
      effectiveHorizontalAlignment: "enumeration",
      elide: "enumeration",
      font: {
        bold: "bool",
        capitalization: "enumeration",
        family: "string",
        hintingPreference: "enumeration",
        italic: "bool",
        kerning: "bool",
        letterSpacing: "real",
        pixelSize: "int",
        pointSize: "real",
        preferShaping: "bool",
        strikeout: "bool",
        styleName: "string",
        underline: "bool",
        weight: "enumeration",
        wordSpacing: "real",
      },
      fontInfo: {
        bold: "bool",
        family: "string",
        italic: "bool",
        pixelSize: "string",
        pointSize: "real",
        styleName: "string",
        weight: "int",
      },
      fontSizeMode: "enumeration",
      horizontalAlignment: "enumeration",
      hoveredLink: "string",
      leftPadding: "real",
      lineCount: "int",
      lineHeight: "real",
      lineHeightMode: "enumeration",
      linkColor: "color",
      maximumLineCount: "int",
      minimumPixelSize: "int",
      minimumPointSize: "int",
      padding: "real",
      renderType: "enumeration",
      rightPadding: "real",
      style: "enumeration",
      styleColor: "color",
      text: "string",
      textFormat: "enumeration",
      topPadding: "real",
      truncated: "bool",
      verticalAlignment: "enumeration",
      wrapMode: "enumeration",
    },
    signals: {
      lineLaidOut: "void-(object line)",
      linkActivated: "void-(string link)",
      linkHovered: "void-(string link)",
    },
    methods: {
      forceLayout: "voide()",
      linkAt: "voide(real x, real y)",
    },
    inherit: "Item",
  },
  TextInput: {
    properties: {
      acceptableInput: "bool",
      activeFocusOnPress: "bool",
      autoScroll: "bool",
      bottomPadding: "real",
      canPaste: "bool",
      canRedo: "bool",
      canUndo: "bool",
      color: "color",
      contentHeight: "real",
      contentWidth: "real",
      cursorDelegate: "Component",
      cursorPosition: "int",
      cursorRectangle: "rectangle",
      cursorVisible: "bool",
      displayText: "string",
      echoMode: "enumeration",
      effectiveHorizontalAlignment: "enumeration",
      font: {
        bold: "bool",
        capitalization: "enumeration",
        family: "string",
        hintingPreference: "enumeration",
        italic: "bool",
        kerning: "bool",
        letterSpacing: "real",
        pixelSize: "int",
        pointSize: "real",
        preferShaping: "bool",
        strikeout: "bool",
        styleName: "string",
        underline: "bool",
        weight: "enumeration",
        wordSpacing: "real",
      },
      horizontalAlignment: "enumeration",
      inputMask: "string",
      inputMethodComposing: "bool",
      inputMethodHints: "enumeration",
      leftPadding: "real",
      length: "int",
      maximumLength: "int",
      mouseSelectionMode: "enumeration",
      overwriteMode: "bool",
      padding: "real",
      passwordCharacter: "string",
      passwordMaskDelay: "int",
      persistentSelection: "bool",
      preeditText: "string",
      readOnly: "bool",
      renderType: "enumeration",
      rightPadding: "real",
      selectByMouse: "bool",
      selectedText: "string",
      selectedTextColor: "color",
      selectionColor: "color",
      selectionEnd: "int",
      selectionStart: "int",
      text: "string",
      topPadding: "real",
      validator: "Validator",
      verticalAlignment: "enumeration",
      wrapMode: "enumeration",
    },
    signals: {
      accepted: "void-()",
      editingFinished: "void-()",
      textEdited: "void-()",
    },
    methods: {
      clear: "void-()",
      copy: "void-()",
      cut: "void-()",
      deselect: "void-()",
      ensureVisible: "void-(int position)",
      getText: "string-(int start, int end)",
      insert: "void-(int position, string text)",
      isRightToLeft: "void-(int start, int end)",
      moveCursorSelection: "void-(int position, SelectionMode mode)",
      paste: "void-()",
      positionAt: "int-(real x, real y, CursorPosition position)",
      positionToRectangle: "rect-(int pos)",
      redo: "void-()",
      remove: "void-(int start, int end)",
      select: "void-(int start, int end)",
      selectAll: "void-()",
      selectWord: "void-()",
      undo: "void-()",
    },
    inherit: "Item",
  },
  CheckBox: {
    properties: {
      checkState: "enumeration",
      nextCheckState: "function",
      tristate: "bool",
    },
    signals: {},
    methods: {},
    inherit: "AbstractButton",
  },
};

export default References;
